# create a container from image
docker container run -it --entrypoint bash --name prod_kerb hchbprod.azurecr.io/base/kerberos:test

# declarative script
# from base container, create runtime version, having removed all the dev/test stuff
$ docker container create --name mybase_container mybase_image:latest
$ docker container cp mylocalfile.py mybase_container:/usr/share/myproject/mysubdir/mylocalfile.py
$ docker container commit mybase_container mycustom_runtime_image_frombase_container
$ docker container -rm mybase_container

# imperative script
# dockerfile
$ FROM mybase_image:latest
$ COPY mylocalfile.py /usr/share/myproject/mysubdir/mylocalfile.py

$ cd /dockerfiles
~/dockerfiles $ docker build --tag my_runtime_tag .


#testing and debug
$ bat 1-build.sh #runs above docker commands to build ready-to-run container; use "set -x" at script start to display 
$ docker container diff mycontainer
$ docker image history -H --no-trunc hchbprod.azurecr.io/base/kerberos

# what is my os/kernal
$ uname -a
$ lsb_release -a
$ cat /etc/*release*
$ cat /etc/*_version /etc/*release* && uname -a

# get containers from AZ 
$ az login
$ az acr login --name hchbprod
$ docker pull hchbprod.azurecr.io/base/kerberos:latest

#my linux server name and ports
$ hostname
$ netstat -tulpn | grep LISTEN
$ lsof -i -P -n | grep LISTEN
$ echo | openssl s_client -servername 16bf042b4efc -connect 16bf042b4efc | openssl x509 -noout -dates
$ openssl x509 -enddate -noout -in /etc/ssl/cert.pem

# SQL Server
# create symlink for sqlcmd
$ ln -sfn /opt/mssql-tools/bin/sqlcmd /usr/bin/sqlcmd
$ /opt/mssql-tools/bin/sqlcmd -S 172.17.0.1,1433 -U SA -P 'MyP@ssword1' -Q "select [I] = @@servername;"


